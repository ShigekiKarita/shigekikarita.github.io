#+TITLE: SuperCollider ビギナーズガイド1
#+AUTHOR: Shigeki Karita
#+LANGUAGE: ja
#+OPTIONS: toc:t num:t H:4 ^:nil pri:t author:t creator:t timestamp:t email:nil
#+HTML_MATHJAX:  path:"MathJax/MathJax.js?config=TeX-AMS_HTML"

* はじめに

SuperColliderは割と珍しいテキストベースの音響プログラミング環境である．似たような環境としてはグラフィカルな環境としてMax/MSPやPureDataがあり，テキストベースの環境としてはTidalなどがある．本稿は何らかのプログラミング言語を触ったことがある人向け．今回は主に環境構築と情報源について記す，とりあえず下記のページからバイナリをDLするのが良い．

https://supercollider.github.io/download


** 補足 Linux 環境

Linuxは無料のOSが多いので，誰にでもオススメしたい．ただしLinuxで最新版のSCを使うにはソースからビルドする必要がある．下記のページが参考になるだろう．

https://github.com/supercollider/supercollider/wiki/Installing-SuperCollider-from-source-on-Ubuntu

またUbuntuの場合は下記のページの情報からaptで若干古いバージョンのバイナリをインストール可能．

https://github.com/supercollider/supercollider/wiki/Installing-SuperCollider-on-Ubuntu-systems

筆者の環境は下記のとおりである．できるだけ環境依存のないような解説を心掛けるが，上手く再現できない場合は参考にして欲しい．

- OS: Ubuntu 18.04 LTS
- SuperCollider: [[https://github.com/supercollider/supercollider/releases/tag/Version-3.10.2][3.10.2]]
- Jack: 1.9.12
- PC: ThinkPad X1
- Audio IF: Roland QuadCapture

筆者は次のようにインストールした．ビルドに5分くらいかかる．

#+begin_src bash
sudo apt-get install build-essential libsndfile1-dev libasound2-dev libavahi-client-dev libicu-dev libreadline6-dev libfftw3-dev libxt-dev libudev-dev pkg-config git cmake qt5-default qt5-qmake qttools5-dev qttools5-dev-tools qtdeclarative5-dev qtpositioning5-dev libqt5sensors5-dev libqt5opengl5-dev qtwebengine5-dev libqt5svg5-dev libqt5websockets5-dev

sudo apt-get install libjack-jackd2-dev

wget https://github.com/supercollider/supercollider/releases/download/Version-3.10.2/SuperCollider-3.10.2-Source-linux.tar.bz2
tar -xvf SuperCollider-3.10.2-Source-linux.tar.bz2

cd SuperCollider-Source
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release -DNATIVE=ON ..
make -j4
sudo make install
#+end_src

Linux環境ではターミナルから ~scide~ コマンドでSuperCollider IDEを起動する．次に ~Ctr-B~ でJackなど音を出すためのサーバを起動する．ここで起動しなかったり思っていたのと違うデバイスの場合は，別のオーディオIFを試すとかサンプルレートの変更などを試す必要がある．

https://supercollider.github.io/tutorials/server-failed-to-start

例えば ~qjackctl~ でJackの設定を変更する．私の場合はデフォルトでPC内蔵のサウンド出力が選ばれていたので，　外部IFのQuadCaptureを選択した．ここでサンプルレートも選べる．選択後にStartボタンを押す．

[[file:/img/jack.png]]

* 情報源

- https://supercollider.github.io/ 公式ページ
- https://supercollider.github.io/tutorials/user-faq 公式のよくある質問
- 

* 音を鳴らす

SCをインストールしたら SuperCollider IDE (scide) を起動する．今回はこの作品を動かしてみる． https://sccode.org/1-4UF#c860
GUIまで実装された，かなりの大作である．

#+begin_src supercollider
// ************************************
// Granular Synthesis Demo (GUI)
// Patch 1 - Granular Sampling
// Bruno Ruviaro, 2013-08-20
// ************************************

/*

Use the "Open New File" button to load a WAVE or AIFF file.
This granulator needs a mono file. If you open a stereo file,
only the left channel will be actually used (though you will
see both channels displayed on the Sound File View).

Trigger: number of grains being triggered per second.
Transp: rate of transposition in semitones.
grainDur: duration of individual grains.
Pan: distribution of grains in the stereo field (left / right).
grainAmp: amplitude of individual grains.
Reverse: probability of a grain to be played backwards (0-100%).

Grains will be chosen randomly from anywhere within
the selected portion of the sound file. You can select
portions of the sound file in two different ways:
a) directly on the waveform (click and drag);
b) using the Selection Slider just below the waveform display.

You can also zoom in and out the waveform
with Shift + Right Click + Mouse Up/Down
(Note: the selection slider will not follow the zoom.
The slider always reflects the position of current
selection in regard to the total duration of the file)

How to start: select all (ctrl + A), then evaluate (ctrl + enter).
(on a Mac, use the command key instead of control)

If you want to have several windows open to granulate different sounds,
comment out the lines Window.closeAll and Buffer.freeAll

*/

s.waitForBoot({
	var win, soundFile, soundFileView, subwin, centerPosSlider, centerPosInSeconds, triggerSlider, transpSlider, transpToRate, durSlider, panSlider, ampSlider, reverseSlider, buffer, synth, startButton, openButton, selectionSpec;


	// FUNCTIONS

	// Convert transpSlider values (in semitones)
	// to rate values for TGrains (1 = no transp):
	transpToRate = {arg transp; transp.linexp(-24, 24, 0.25, 4)};

	// Convert from centerPosSlider values (0-1)
	// to actual sound file position in seconds:
	centerPosInSeconds = {
		[
			centerPosSlider.lo.linlin(0, 1, 0, soundFile.duration),
			centerPosSlider.hi.linlin(0, 1, 0, soundFile.duration)
		] // returns an array [lo, hi]
	};

	Window.closeAll;
	Buffer.freeAll;

	// Main window
	win = Window.new("Granular Sampling", Rect(50, 50, 600, 580), false).front;
	win.background = Color.grey(0.1, 0.9);
	win.onClose = {s.freeAll};

	// Sound File View
	soundFileView = SoundFileView.new(win, Rect(30, 20, 540, 200))
	// .soundfile_(soundFile)
	// .read(0, soundFile.numFrames)
	.gridColor_(Color.gray(0.3));

	// What to do when user selects portion of sound file directly
	// (i.e., on waveform, not using slider)
	soundFileView.mouseUpAction = {arg view;
		var loFrames, hiFrames, loSlider, hiSlider;
		loFrames = view.selection(0)[0];
		hiFrames = view.selection(0)[1] + loFrames;
		loSlider = selectionSpec.unmap(loFrames);
		hiSlider = selectionSpec.unmap(hiFrames);
		2.do{centerPosSlider.setSpanActive(loSlider, hiSlider)}; // 2.do = hack...
	};

	// Open Button
	openButton = Button.new(win, Rect(460, 20, 110, 30))
	.states_([["open new file", Color.black, Color.gray]])
	.action_({

		"HELLO".postln;
		// Stop whatever is playing
		s.freeAll;

		startButton.value = 0;

		Dialog.openPanel(
			okFunc: { |path|
				soundFile = SoundFile.new;
				soundFile.openRead(path);
				// Load sound into buffer
				buffer = Buffer.readChannel(s, path, channels: [0]);
				// Display sound on View
				soundFileView.soundfile_(soundFile);
				soundFileView.read(0, soundFile.numFrames);
				// ControlSpec (slider 0-1 <=> numFrames)
				selectionSpec = ControlSpec(0, soundFile.numFrames);
				// selectionSpec.postln;
				// Set initial selection on View
				soundFileView.setSelection(0, selectionSpec.map([0.1, 0.2]));
				// Update slider
				soundFileView.mouseUpAction.value(soundFileView);
			},
			cancelFunc: {"cancelled"}
		);



	});


	// Sub view to group all sliders
	subwin = CompositeView.new(win, Rect(20, 225, 560, 360))
	// .background_(Color.red(0.4))
	;
	subwin.decorator = FlowLayout(subwin.bounds, margin: 0@0, gap: 5@10);

	centerPosSlider = RangeSlider(subwin, 560@50)
	.lo_(0.1)
	.hi_(0.3)
	.action_({ |v|
		var lo, hi, size;
		lo = selectionSpec.map(v.lo);
		hi = selectionSpec.map(v.hi);
		size = hi - lo;
		soundFileView.setSelection(0, [lo, size]);
		if(startButton.value==1, {synth.set(
			\centerPosLo, centerPosInSeconds.value[0],
			\centerPosHi, centerPosInSeconds.value[1])});
		// ["uau", v.lo, v.hi, lo, hi].postln;
	});

	triggerSlider = EZRanger(
		parent: subwin,
		bounds: 560@30,
		label: "Trigger  ",
		controlSpec: ControlSpec(
			minval:	0.5,
			maxval: 50,
			warp: 'exp',
			step: 0.1,
			units: " t/s"),
		action: {|v|
			if(startButton.value==1, {synth.set(\triggerLo, v.lo, \triggerHi, v.hi)})},
		initVal: [1, 2],
		labelWidth: 60,
		unitWidth: 30)
	.setColors(Color.grey,Color.white, Color.grey(0.7),Color.grey, Color.white, Color.yellow);

	transpSlider = EZRanger(
		parent: subwin,
		bounds: 560@30,
		label: "Transp  ",
		controlSpec: ControlSpec(
			minval:	-24, // two octaves below
			maxval: 24, // two octaves above
			warp: 'lin',
			step: 1, // step by semitones
			units: " ST"),
		action: {|v|
			if(startButton.value==1, {
				synth.set(
					\rateLo, transpToRate.value(v.lo),
					\rateHi, transpToRate.value(v.hi))})},
		initVal: [0, 0],
		labelWidth: 60,
		unitWidth: 30)
	.setColors(Color.grey,Color.white, Color.grey(0.7),Color.grey, Color.white, Color.yellow);

	durSlider = EZRanger(
		parent: subwin,
		bounds: 560@30,
		label: "grainDur  ",
		controlSpec: ControlSpec(
			minval:	0.1,
			maxval: 2,
			warp: 'lin',
			step: 0.1,
			units: "sec"),
		action: {|v|
			if(startButton.value==1, {synth.set(\durLo, v.lo, \durHi, v.hi)})},
		initVal: [0, 0],
		labelWidth: 70,
		unitWidth: 30)
	.setColors(Color.grey,Color.white, Color.grey(0.7),Color.grey, Color.white, Color.yellow);

	panSlider = EZRanger(
		parent: subwin,
		bounds: 560@30,
		label: "Pan     ",
		controlSpec: ControlSpec(
			minval:	-1,
			maxval: 1,
			warp: 'lin',
			step: 0.1,
			units: "L/R"),
		action: {|v|
			if(startButton.value==1, {synth.set(\panLo, v.lo, \panHi, v.hi)})},
		initVal: [0, 0],
		labelWidth: 60,
		unitWidth: 30)
	.setColors(Color.grey,Color.white, Color.grey(0.7),Color.grey, Color.white, Color.yellow);

	ampSlider = EZRanger(
		parent: subwin,
		bounds: 560@30,
		label: "grainAmp ",
		controlSpec: ControlSpec(
			minval:	0.0,
			maxval: 1,
			warp: 'lin',
			step: 0.01,
			units: "amp"),
		action: {|v|
			if(startButton.value==1, {synth.set(\ampLo, v.lo, \ampHi, v.hi)})},
		initVal: [0.2, 0.4],
		labelWidth: 73,
		unitWidth: 35)
	.setColors(Color.grey,Color.white, Color.grey(0.7),Color.grey, Color.white, Color.yellow);

	reverseSlider = EZSlider(
		parent: subwin,
		bounds: 560@30,
		label: "Reverse  ",
		controlSpec: ControlSpec(
			minval:	0,
			maxval: 100,
			warp: 'lin',
			step: 1,
			units: "%"),
		action: {|v|
			if(startButton.value==1, {synth.set(\reverseProb, v.value/100)});
		},
		initVal: 0.0,
		labelWidth: 63,
		unitWidth: 35)
	.setColors(Color.grey,Color.white, Color.grey(0.7),Color.grey, Color.white, Color.yellow);

	startButton = Button.new(subwin, 560@40)
	.states_([["START"], ["STOP", Color.black, Color.gray]])
	.action_({arg button;
		if(button.value==1,
			{
				synth = Synth("granular-sampling", [
					\triggerLo, triggerSlider.lo,
					\triggerHi, triggerSlider.hi,
					\rateLo, transpToRate.value(transpSlider.lo),
					\rateHi, transpToRate.value(transpSlider.hi),
					\centerPosLo, centerPosInSeconds.value[0],
					\centerPosHi, centerPosInSeconds.value[1],
					\durLo, durSlider.lo,
					\durHi, durSlider.hi,
					\panLo, panSlider.lo,
					\panHi, panSlider.hi,
					\ampLo, ampSlider.lo,
					\ampHi, ampSlider.hi,
					\reverseProb, reverseSlider.value,
					\bufnum, buffer.bufnum]);
			},
			{synth.free});
	});


	// SynthDef
	SynthDef("granular-sampling", {
		arg triggerLo, triggerHi, rateLo, rateHi, centerPosLo, centerPosHi, durLo, durHi, panLo, panHi, ampLo, ampHi, reverseProb, bufnum;

		var trig, trigFreqMess, rate, centerPos, dur, pan, amp, coin, reverse, snd;
		// var bufdur = BufDur.kr(buffer);

		trigFreqMess = LFNoise2.kr(12).range(0.5, 1);
		trig = Impulse.kr(LFNoise0.kr(trigFreqMess).range(triggerLo, triggerHi));

		rate = Dwhite(rateLo, rateHi);
		centerPos = Dwhite(centerPosLo, centerPosHi);
		dur = Dwhite(durLo, durHi);
		pan = Dwhite(panLo, panHi);
		amp = Dwhite(ampLo, ampHi);
		coin = CoinGate.kr(reverseProb, trig);
		reverse = Select.kr(coin, [1, -1]);
		// reverse.poll(trig);

		Demand.kr(trig, 0, [rate, centerPos, dur, pan, amp]);

		snd = TGrains.ar(
			numChannels: 2,
			trigger: trig,
			bufnum: bufnum,
			rate: rate * reverse,
			centerPos: centerPos,
			dur: dur,
			pan: pan,
			amp: amp);

		Out.ar(0, snd);

	}).add;

}); // end of block
#+end_src

[[file:/img/scide.png]]

動かし方は scide でサーバを起動(Ctrl-Bなど)して，上の写真でいう左側の画面に貼り付けて，全選択したあと実行(Ctrl-Enter)すると次のようなGUIがでてくる．

[[file:/img/sc_granular_sampling.png]]

音声を読み込むようなので，とりあえず以前，このサイトのブログにアップロードした，回路を改造したギターの録音を取り込んで遊んでみた．グラニュラー的な奇妙な音になった．

https://soundcloud.com/kari_tech/sc-190216-162023
#+begin_export html
<iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/576250611&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true"></iframe>
#+end_export

ちなみにSC上のなっている音を録音するには scide のメニュー Server から ~Start recoding~ を選択．すると Post window (右下のウィンドウ) に保存先などが表示されるので，良い感じの音を出した後，もう一度おなじメニューを選択すると録音が止まる．
