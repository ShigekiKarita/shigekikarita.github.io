#+TITLE: KARITECH
#+AUTHOR: Shigeki Karita
#+LANGUAGE: ja

# THEMES (uncomment one block) #

# org.css
#+OPTIONS: toc:t num:nil H:4 ^:nil pri:t author:t creator:t timestamp:t email:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/org.css"/>

#+BEGIN_abstract
#+BEGIN_center
OCaml関係の小ネタ
#+END_center
#+END_abstract

OCaml 4.04, Batteries 2.5.3 の情報です

* Unicode 文字列の操作

OCamlで日本語(とunicode全般)を処理するには、どうすればいいのか...。[[https://www.reddit.com/r/ocaml/comments/39t31h/libraries_and_tools_for_unicodeutf8_strings_in/][Reddit - Libraries and Tools for Unicode/UTF-8 strings in OCaml?]]によると[Camomile](https://github.com/yoriyuki/Camomile)と、現在Camomileは開発終了され、その作者はBatteriesの[BatText](http://ocaml-batteries-team.github.io/batteries-included/hdoc2/BatText.html)に貢献しているのでとりあえずBatteriesを使おうと思います。

[[https://github.com/ocaml-batteries-team/batteries-included/wiki/Interfacechanges12#non-backwards-compatible-changes][BatteriesのWiki]] によると、Unicode関係のライブラリは以前はRopeという名前でしたが今はBatTextらしいです。BatTextライブラリでは文字列の実装はRopeという永続的データ構造でありながら、操作後も可能な限りデータを共有するため、長さ $n$ の文字列に $m$ (ただし $n >> m$ )回の操作で $O(m)$ サイズの空間しか使わないとか。ただUnicode文字列を逆順にしたりするくらいなら、標準の ~Str~ モジュールやBatteriesの ~String~ モジュールでもそんなに困らないような気もしています。

*** 一通りの簡単な使い方

簡単な例として(日本語の)文字列を交互に結合する[自然言語処理100本ノック](http://www.cl.ecei.tohoku.ac.jp/nlp100/)の1本目で説明します。
まずライブラリの batteries と自動ビルドするコマンドをインストールします。

~$ opam install batteries ocamlbuild~

~utop~ などの対話ツールが便利なんですが、何故かUnicode文字列が文字化けしたりするので、今回は基本的にコンパイルして結果を確認しています。コンパイルをするには ~_tags~ という全てのOCamlソース(`<*>`)に対する依存パッケージを書いたファイル

#+begin_src
<*>: package(batteries)
#+end_src

を用意して、以下のコマンドで ~q01.ml~ というファイル

#+begin_src ocaml
open Batteries

let zip_string a b =
  let to_enum =  Text.enum % Text.of_string in
  let ea = to_enum a in
  let eb = to_enum b in
  let append2 x y = Text.append_char x %> Text.append_char y in
  let zip_text = Enum.fold2 append2 Text.empty in
  zip_text ea eb |> Text.to_string

let () = zip_string "パトカー" "タクシー" |> print_endline
#+end_src

細かいことはともかく、以下のようにコンパイル＆実行できます。

#+begin_src bash
$ ocamlbuild -use-ocamlfind ./q01.native
$ ./q01.native
パタトクカシーー
#+end_src

また何か、自然言語処理100本ノックやって知見がたまったら続き書きます。


* Batteries の小ネタ

BatteriesはC++でいうBoostのようなライブラリ集で、標準ライブラリの機能拡張を提供しています。 ~open Batteries~ で標準ライブラリを上書きして簡単に使えます(例えば ~BatText~ モジュールは ~Text~ として使える)。ただしBatteriesは非互換の変更が多く、ドキュメントも色んなverが公開されてるのは注意です。コードが動かない時はまず[[https://github.com/ocaml-batteries-team/batteries-included/wiki/Interfacechanges12#non-backwards-compatible-changes][Non-backwards-compatible changes]] を読みましょう。

** toplevel から使う

toplevel (ocaml とか utopコマンド) の設定ファイル ~.ocamlinit~ を編集。

~cat $OCAML_TOPLEVEL_PATH/../batteries/ocamlinit >> ~/.ocamlinit~

** 中置き演算子

デフォルトで有効になっている中置き演算子は[BatPervasives](https://ocaml-batteries-team.github.io/batteries-included/hdoc2/BatPervasives.html)に説明してあります。

よく使う演算子

+ 関数合成・適用系 f (g x) = f ~%~ g x = (g ~%>~ f) x = g x ~|>~ f = f ~@@~ g x
  + ただし % は関数合成(~('a -> 'b) -> ('b -> 'c) -> 'a -> 'c~)、
    @@は関数適用(~('a -> 'b) -> 'a -> 'b~)
+ Java の ~getOrElse~: ~None |? 10 = 10~
+ BatEnum の操作
  + filter 操作: ~enum // p~ 真偽値を返す p で filter
  + map操作: ~enum /@ f = f @/ enum~ enum の各要素に f を適用
  + filter_map: ~//@~, ~@//~ 上記の f が option を返す特殊化、適用後 None な要素をfilterして返す
  + Python の ~range~: ~(1--10)~ 1 から 10 未満の int の Enum, ~(--.)~ は float版, ~(--~)~ は char 版

** print 関数

だいたいのモジュールには `print` 関数が定義されていて以下のように使います。

#+begin_src ocaml
Text.print stdout (Text.of_string "hello\n")
(* > hello *)
Enum.print Int.print stdout (1--10) ~first:"[" ~sep:"; " ~last:"]\n" 
(* > [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] *)
#+end_src

** BatEnum

[[https://ocaml-batteries-team.github.io/batteries-included/hdoc2/BatEnum.html][(Bat)Enum]] は, [[https://github.com/ocaml-batteries-team/batteries-included/wiki/Introduction-to-batEnum][Wiki]] によるとデータ構造の変換ブリッジや、線形アルゴリズムの実装に使うものらしいけど、 ~List~ とどう違うのかはよくわからない ( ~LazyList~ にできないことはできないとも書いてある)、ただ関係する関数を見てると使い捨て(処理の中間で使う)可変データ構造らしく[[https://www.tutorialspoint.com/d_programming/d_programming_ranges.htm][D言語のRange]] っぽい感じがします(適当)。

Pervasives (標準で open されてるライブラリ) には BatEnum モジュール内の関数が殆ど定義されているので無修飾で使えます。

** BatEnum内包表記

Wikiに書いてある内包表記は少なくとも現verではなくなっているようです。
今は別パッケージ

https://github.com/cakeplus/pa_comprehension

になっていて、 ~opam install pa_comprehension~ で入ります。
~~/.ocamlinit~ には ~#require "pa_comprehension";;~ を追記します。
~_tags~ には ~<*>: package(batteries,camlp4,pa_comprehension),syntax(camlp4o)~ としてパッケージと文法拡張を追加します。
