                            ━━━━━━━━━━━━━━━━
                                KARITECH

                             Shigeki Karita
                            ━━━━━━━━━━━━━━━━


目次
────

2018年02月24日 D言語でnumpyっぽいコードを書く
.. いままで記事
2018年01月16日 C++でネストした要素型の取得                         :cpp:
2018年01月02日 おけましておめでとうございます.                   :emacs:
.. <2018-01-20 Sat 10:56>


                            ライフログ的な…

[index]


[index] file:index.html


2018年02月24日 D言語でnumpyっぽいコードを書く
═════════════════════════════════════════════

  今まで何度か取り上げてきた mir というD言語で便利な多次元配列(ndslice)
  のライブラリについての話です．


いままで記事
────────────

  • [D言語で数値計算 mir-algorithm]
  • [numir が libmir 入りしました]
  • [MirのndsliceでMKLを使う]

  私が作っている numpy のような関数をサポートしている [numir] には最近大
  規模な機能追加がありました．

  1. format / stats / signal といった ndslice を駆使した応用的なモジュー
     ルの追加
  2. ドキュメントの充実
  3. example の充実

  1-2 は [jmh530] さんや，mir本家の作者による実装も多く取り込まれており，
  私個人のプロジェクトからlibmirに移行して本当によかったなと思っています．
  mirにおけるndsliceの汎用性は本当に大きく，例えばD言語のプロット用ライ
  ブラリ [ggplod] とも簡単にインテグレートできます．

  [https://github.com/libmir/numir/raw/master/example/audio_separation/mixed-stft.png]




  あと，最後にもう一つ，なんと numir がウェブ上のコンパイラ run.dlang.io
  で動くようになりました．mir関係のライブラリはほとんどがサポートされて
  いるので，使い方がわからないとか，コード辺を共有するときに便利だと思い
  ます．

  [https://run.dlang.io/gist/671587b1452b916dc68dddd1cf507efb?compiler=ldc&args=-release]


[D言語で数値計算 mir-algorithm]
https://shigekikarita.github.io/blog/2017/09/22/026.html

[numir が libmir 入りしました]
https://shigekikarita.github.io/blog/2017/09/30/027.html

[MirのndsliceでMKLを使う]
https://shigekikarita.github.io/blog/2017/10/27/001.html

[numir] https://github.com/libmir/numir

[jmh530] https://github.com/jmh530

[ggplod] https://github.com/BlackEdder/ggplotd


2018年01月16日 C++でネストした要素型の取得                         :cpp:
══════════════════════════════════════════

  ごくまれにC++で
  ┌────
  │ std::vector<std::vector<float>>
  └────
  のようなネストした型の最後の要素 (ここでは float) を取得したいことがあ
  る．D言語のように後方参照可能な型システムでは， [再帰的に型を辿れば簡
  単] だが，
  ┌────
  │ template NestedElementType(T) {
  │     static if (isArray!T) {
  │         alias NestedElementType = NestedElementType!(ElementType!T);
  │     } else {
  │         alias NestedElementType = T;
  │     }
  │ }
  └────
  C++ではそうはいかない．しかし， `constexpr' を使えば間接的に型の再帰的
  な操作が可能になる．
  ┌────
  │ /* 対象のContainer型は .begin() メソッドで最初の要素を返すとする
  │ 
  │    通常，型は再帰できない
  │  template <typename E>
  │  using DeepElementTypeof = std::conditional_t<std::is_fundamental<E>::value,
  │      E, DeepElementTypeof<decltype(*std::declval<E>().begin())>>;
  │ */
  │ 
  │ // SFINAEとcostexprならできる
  │ #include <type_traits>
  │ #include <vector>
  │ 
  │ template <typename E>
  │ constexpr bool is_element = std::is_fundamental<E>::value;
  │ 
  │ template <typename E>
  │ constexpr std::enable_if_t<is_element<E>, E> deep_elem(E) {
  │     return E{};
  │ }
  │ 
  │ template <typename Container, typename _ = std::enable_if_t<!is_element<Container>>>
  │ constexpr auto deep_elem(Container il) {
  │     return deep_elem(*il.begin());
  │ }
  │ 
  │ template <typename E>
  │ using DeepElementTypeof = std::remove_cv_t<decltype(deep_elem(std::declval<E>()))>;
  │ 
  │ std::vector<std::vector<float>> c;
  │ static_assert(std::is_same<DeepElementTypeof<decltype(c)>, float>::value);
  │ 
  │ int main() {}
  └────
  多次元配列を一次元配列に変換する関数なんかに便利だ．注意したいのは，こ
  のコードではfundamental型しか最終要素として見なさない．例えば
  `std::complex<float>' などはコンパイルエラーになるだろうが，
  `constexpr bool is_element = ...' を適切に定義すれば良いはずだ．


[再帰的に型を辿れば簡単]
https://github.com/libmir/numir/blob/83dbfe883b5421ba5dcf782cef272f8d205907a6/source/numir/core.d#L195-L205


2018年01月02日 おけましておめでとうございます.                   :emacs:
══════════════════════════════════════════════

  どうもここ二年は殆ど技術ブログを更新できませんでした。幾つか原因を考え
  たところ

  1. Markdownがしんどい (細かい方言、Github,MDWiki,Jekyllで微妙に仕様が
     違う)
  2. C++/CUDA(のような膨大な知識を要求する言語)をあまり書かなくなってネ
     タが少ない

  ということが挙げられます。私にとってMarkdownを使ってブログを書くのは表
  現力の低さ(文法ハイライトや数式表示に外部ツールが必要)、とくにJekyll保
  守の面がしんどかったのです…。そこで、何気なくEmacsに標準で付属している
  org-modeを試したところ、良さげだったので移行しました。日常的にも仕事の
  メモで使っているのですが、不満は全く無く、Markdownに対する利点としては

  • Emacsさえあれば環境構築は完了
  • なんとなくMarkdownに文法が似てplain-textでも読み書きしやすい
  • Emacsで文法ハイライトできる言語は全て対応されるので最強(Pygmentsなど
    がいらない)
  • 表計算や表の整形もお手軽
  • HTML出力(`C-c C-e h h' で一発変換)ではMathjaxの数式組版も標準でサポー
    ト
  • `org-md-export-to-markdown' でMarkdownへ出力できる(!)
  • ODT//TeX/PDF出力もお手軽。Pandocは要りません。

  という唯一無二なツールでした。標準以外の機能としてはこんなものを使って
  います

  • 雑記用に [org-journal] という自動で日時付きの見出しをorgファイルに挿
    入するパッケージ
  • Mathjaxが古いので、[最新版] DLして使っています。(数式番号が振られま
    す)
  • HTML出力が味気ないので、[公式ページのCSSを改造] して使っています。
  • HTML出力をリアルタイム更新でモニタするために [browser-sync] を使って
    います。(例: `browser-sync start --server --files **/*.html' )

  その他の細かい設定としてはこんな事をしてます。
  ┌────
  │   ;; org-journal をブログ用のリポジトリに1ファイルでまとめる
  │   (setq org-journal-date-format "%x")
  │   (setq org-journal-time-format "<%Y-%m-%d %R> ")
  │   (setq org-journal-file-format "journal.org")
  │   (setq org-journal-dir "~/Documents/repos/shigekikarita.github.io/")
  │ 
  │   ;; org-mode からバッファ移動のコマンドを取り戻す
  │   (add-hook 'org-shiftup-final-hook 'windmove-up)
  │   (add-hook 'org-shiftleft-final-hook 'windmove-left)
  │   (add-hook 'org-shiftdown-final-hook 'windmove-down)
  │   (add-hook 'org-shiftright-final-hook 'windmove-right)
  │ 
  │   ;; org-mode は行の折り返しなしモードになるので、無効にする
  │   (setq org-startup-truncated nil)
  │ 
  │   ;; 日本語PDFのためにlualatex他、便利TeXパッケージを使う
  │   (setq org-latex-classes '(("ltjsarticle"
  │ "\\documentclass{ltjsarticle}
  │ \\usepackage{url}
  │ \\usepackage{amsmath}
  │ \\usepackage{newtxtext,newtxmath}
  │ \\usepackage{graphicx}
  │ \\usepackage{luatexja}
  │ \\usepackage{hyperref}
  │  [NO-DEFAULT-PACKAGES]
  │  [PACKAGES]
  │  [EXTRA]"
  │             ("\\section{%s}" . "\\section*{%s}")
  │             ("\\subsection{%s}" . "\\subsection*{%s}")
  │             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  │             ("\\paragraph{%s}" . "\\paragraph*{%s}")
  │             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
  │                ))
  │   (setq org-latex-pdf-process '("latexmk -gg -lualatex %f"))
  │   (setq org-latex-default-class "ltjsarticle")
  └────

  あとC++/CUDAも1,2年離れていたのですが、仕事でまた使うようになり、リハ
  ビリがてらC++17対応の [C++ Template Complete Guide] を読み進めているの
  で、面白いネタがあれば紹介しようと思います。

  それでは、今年も宜しくお願いします。


[org-journal] https://github.com/bastibe/org-journal

[最新版] http://docs.mathjax.org/en/latest/installation.html

[公式ページのCSSを改造] file:css/org.css

[browser-sync] https://www.browsersync.io/

[C++ Template Complete Guide] http://www.tmplbook.com/

<2018-01-20 Sat 10:56>
──────────────────────



                                           Emacs 24.5.1 (Org mode 9.0.3)
